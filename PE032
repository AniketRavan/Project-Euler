#include <iostream>
using namespace std;
#include <math.h>
 
int array2int(int a[], int n){
	int number = 0;
	for (int i = 0; i < n; i++){
		number = number*10 + a[i];
	}
	return number;
}

bool repeat(int a[],int size){
	for (int i = 0; i < size; i++){
		for (int j = i + 1; j < size; j++)
			if (a[i] == a[j])
				return true;
	}
	return false;
}
 
int found(int number[]){
	int m1, m2, n1, n2, n3;
	int sum = 0;
	for (m1 = 1; m1 < 5; m1++){
		int M1[m1];
		for (int i = 0; i < m1; i++)
			M1[i] = number[i];
		for (m2 = ceil(4.5 - m1); m2 < 10 - 2*m1; m2++){
			int M2[m2];
			for (int j = 0; j < m2; j++)
				M2[j] = number[m1 + j];
				int M3[9 - m1 - m2];
				for (int k = 0; k < 9 - m1 - m2; k++)
					M3[k] = number[m1 + m2 + k];
					n1 = array2int(M1, m1);
					n2 = array2int(M2, m2);
					n3 = array2int(M3, 9 - m1 - m2);
					//cout<<n1<<" "<<m1<<"    "<<n2<<" "<<m2<<"    "<<" "<<n3<<endl;
					if (n1*n2 == n3){
						cout<<n1<<" "<<n2<<" "<<n3<<endl;
						sum = sum + n3;
					}
				}	
			}
	return sum;
}
	

int main(){
	int idx = 0;
	long long sum = 0;
	//Generating permutations by brute force
	int pandigital[9];
	for (int i = 1; i < 10; i++){
		pandigital[0] = i;
		//cout<<i<<endl;
		for (int j = 1; j < 10; j++){
				pandigital[1] = j;
	
			for (int k = 1; k < 10; k++){
				pandigital[2] = k;

				for (int l = 1; l < 10; l++){
					pandigital[3] = l;
		
					for (int m = 1; m < 10; m++){
						pandigital[4] = m;
							
						for (int n = 1; n < 10; n++){
							pandigital[5] = n;
							
							for (int o = 1; o < 10; o++){
								pandigital[6] = o;
								
								for (int p = 1; p < 10; p++){
									pandigital[7] = p;
									
									for (int q = 1; q < 10; q++){
										pandigital[8] = q;
										if (!repeat(pandigital, 9))
											sum = sum + found(pandigital);
										}	
									}
								}
							}
						}
					}
				}
			}
		}
	cout<<sum;
	return 0;
}
